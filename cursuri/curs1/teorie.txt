paradigme de programaer

1. structurata
2.procedurala/imperativa
3.modulara
4.functionala
5.logica
6.POO
7.generica


POO: -obiect componenta de baza 
     -instantiere obiect din clasa

    Obiect: -atribute
            -campuri
            -proprietati 

    Caracteristici POO: -ascunderea sau incapsularea datelor(setarea vizibilitatii)
                        -polimorfism
                        -mostenirea      
                        -datele sunt incapsulate in obiect, nu avem acces la ele, adica ele sunt private
                        -la date avem acces doar prin getter si setter 

    Polimorfism:-apare doar in cazul mostenirii 
                -am mostenit clasele de baza in clase copil
                
                
                ex: functie (Baza param)
                    apel functie (obiect baza )
                    apel functie (obiect derivat)

    Suprascriere: doar la mostenire

    Supraincarcarea: apare fara mostenire de clase
                     sqrt(double, double)
                     sqrt(double, float)
                     sqrt(int, int)


Tipuri abstracte si programare generica 



PARTEA 2 CURS 1

Programarea generica

        avem fisiere header (.h), unde se face declararea clasei si prototipul functiilor, prototip adica fara implementare
        iar in fisierul .cpp o sa punem implementarea, definirea metodelor


Programarea generica cu clase sablon C07

Java: Object

Visual studio - exemple VS2013
QT: GUI Proiect
CodeBlocks

Clasa.cpp -> Clasa.h
Main.cpp -> Main.h


        -tipul bool poate sa aiba 2 valori: false(0) si true(1)
        

Alocare dinamica:

in C: alocare: malloc, calloc, realoc
        -dealocare: free 
        -int *v = (int*)malloc(n * sizeof(int));
        -free v;


int C++: alocare: new
        -dealocare: delete
        -int &v = new int[j];
        -delete[] v;  -> elibereaza toate elementele 
        -delete v;  -> INCORECT pentru ca elibereaza numai pointerul


declarare dinamica de matrice in c++

        int ** a = new int *[n];
        for(int i =0; i < n; i++)
        {
                a[i]= new int [m];
        }
        for (int i = 0; i < n; i++)
        {
                delete[] a[i];   //elibereaza linia respectiva
        }
        delete[] a; //elibereaza vectorul de pointeri(practic prima coloana)



cin, cout: fluxuri de date standard
        cin si cout se numesc obiecte, si fac parte din std 
        sunt elemente de tip flux 
        sunt de tip static


includurile standard din c++ nu se termina cu .h, dar daca vrem sa folosim math.h o sa scriem <cmath> sau la stdlib.h 
o sa folosim <cstdlib>



spatii de nume : using namespace std;

        ex: namespace A{ (declarare de clasa)
                class Cl
                {
                        
                }; //se pune ; dupa } de la clasa

        }

        namespace B{

                class Cl{ };
                Cl obiect;
                A::Cl obiect 2;

        }

        namespace B{
                using namespace A;
                class Cl{...};
                Cl obiect 3;
        }; //eroare? ambiguitate



Referinta: 
        -Tipul referinta sta in loc de pointer(dar nu se aplica la alocare de memorie la matrici etc)
                ci este folosit la apeluri de functii 
                ex(in java): Clasa c = new Clasa();
                                   c este referinta la clasa 


tip & varref = var;
int i = 10;
int & refi = i;

++refi;//crestem prin referinta contorul 

cout << refi << i;
        11      11

i = 100

cout << refi << i;
        100    100


        avem o variabila cu o val iar referinta este un strat exterior care are acces direct atat la val cat si la adresa
        nu mai trebuie sa trecem steluta de la pointeri in fata, nu mai e nevoie la referinta 

                *adri este i 
                iar refi este tot i



exemplu de referinta la interschimbare de val intre 2 variabile



/////////////////////////////////////////////////////////

int main()
{
        int a = 100, b = 200;
        
        interschimbare1(a,b);

        a ramane 100 iar b ramane 200 pentru ca nu am folosit pointeri

        interschimbare2(a,b);//o sa functioneze si e varianta cu pointeri

        interschimbare3(a,b);//o sa functioneze si e varianta cu referinta


}

void interschimbare1(int x, int y)
{
        int tmp = x;
        x = y;
        y = tmp;


        int functie se schimba dar pentru ca nu folosim pointeri nu se transmit valorile schimbate la variabile

}


void interschimbare2(int *adra, int * adrb)
{
        int tmp = *adra;
        *adra = *adrb;
        *adrb = tmp;
}

interschimbare3(int &ra, int &rb) prin apel val variabilei a se transmite in referinta refa 
{
        int tmp = ra;
        ra = rb;
        rb = tmp;
}



/////////////////////////////////////////////////////////




ex2 la referinte: 

int main()
{

}

int& max(int a, int b)
{
        //in acest caz declaram o referinta &m care o sa fie egala cu max(a,b)

        int &m = max(a,b);

        practic nu se mai ia memorie pentru inca o variabila in care sa se stocheze max
        ci m o sa fie o referinta catre val maxima dintre cele 2 numere

        practic revenim cu acelasi obiect,cal max, deci nu se foloseste memorie in plus

        m este o alta denumire pentru var a, practic referinta


}




int max(int a, int b)
{
        //in acest caz se verifica maximul si se creaza o variabila locala in care stocam max

        int a = 100;
        int b = 200;


        int m = max(a,b); variabila in care intra val max


}




Referinta constanta: const int &r = a; //corect
                        
                        
                        const int &r;//gresit
                        r = a;       //gresit



 


Functii cu parametrii impliciti

        in cazul in care dorim sa calculam perimetrul unui patrulater

        avem un aptrulater a, b,c,d 

double P(double a, double b, double c, double d)
{
        return a+b+c+d;
}      

daca vrem nr diferit de argumente


double P(double a, double b, double c, double d = 0)
{
        return a+b+c+d;

        //d are deja valoare deci este un parametru impliciti

}  

in main: apelam P(x,y,z);//merge pentru ca avem o valoare implicita la d
         apelam P(x,y,z,t);//merge si a

putem da valori implicite la toate argumentele functiei P ,si in acel caz poate sa fie apelata fara parametrii,cu un parametru, cu 2 parametrii sau 3 sau toti

Gresit: double P(double a = -1; double b, double c, double d)
                {

                }

        in main: P(?,y,z,t); nu merge pentru ca valoarea implicita este prima din functie
                 P( ,y,z,t); asa ceva nu exista


Exceptii: 

trebuie noi sa declaram clasa cu exceptii

class Exceptie{
        void functie(){
                if(conditie)
                {
                        Exceptie ex;
                        throw ex;//instantiere de tip exceptie
                }
        }
        try{
                functie();
        }
        catch(Exceptie e ){
                cout << "exceptie .....";
        }
}



















